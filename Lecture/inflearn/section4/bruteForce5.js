/* Section 4. 완전 탐색 (브루트 포스) - K 번째 큰 수
[ ] 문제 이해 : 1 ~ 100 사이 자연수가 담긴 N장의 카드 (서로 같은 수가 존재할 수 있음)에서 3장을 뽑는 경우의 수를 돌려서 기록한 값이 가장 큰 수를 출력한다.
- i 번째 값이 순회할 때, j와 k이 숫자를 각각 i+1, j+1 부터 해서 n만큼 비교해야하므로 입력 값을 크기를 고려해봤을 때 3중 반복문에 완전탐색으로 진행하면 될 것 같다고 접근
- 전체 3개를 합한 값에서 k 번째 큰 수를 찾으니까 중복된 값을 제거하기 위해서는 Set 인스턴스를 생성해서 중복 값을 배제시키고, 합한 값들을 다 담는 방식을 생각했다
*/

function solution(n, k, card) {
  let set = new Set();
  for (let i = 0; i < n; i++) {
    for (let j = i + 1; j < n; j++) {
      for (let k = j + 1; k < n; k++) {
        set.add(card[i] + card[j] + card[k]);
      }
    }
  }
  return [...set].sort((a, b) => b - a)[k - 1];
}

let arr = [13, 15, 34, 23, 45, 65, 33, 11, 26, 42];
console.log(solution(10, 3, arr)); // 143
